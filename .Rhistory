if (nrow(data) >= 200){
quant_models <- quant_models[! quant_models %in% c("knn")]
categ_models <- categ_models[! categ_models %in% c("knn")]
}
# specify which models to train
if (missing(methods)) {
if (is.factor(data[[y]])) {
methods <- categ_models
} else {
methods <- quant_models
}
}
# loading required packages
if ("gbm" %in% methods) {
require(gbm)
}
# model list
models <- list()
# train models
for (method in methods){
if (method == "gbm") {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
verbose = FALSE,
...
)
models[[method]] <- model
} else {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
...
)
models[[method]] <- model
}
}
# result
result <- list(train = train,
test = test,
methods = methods,
models = models,
metric = metric
)
class(result) <- "quickmodel"
return(result)
}
# regression model
data(Boston)
reg <- quickmodel(medv ~ ., data = Boston)
quickmodel <- function(formula,
data, # all data
metric ,
methods ,
trControl = trainControl(),
tuneGrid = NULL,
tuneLength = 3,
partition = 0.8,
seed = 1234,
...
) {
# stop when the input dataset is too small
if (nrow(data) < 50){
stop("Dataset too small.")
}
# quantitative
quant_models <- c("lm", "knn", "rf",
"rpart",
"gbm", "glmnet")
# categorical
categ_models <- c("glm", "knn", "rf", "rpart", "gbm")
# load caret
require("caret")
# extract y varname
y <- all.vars(formula)[1]
# change y var to factor if character
if (is.character(data[[y]])) {
data[[y]] <- factor(data[[y]])
}
# split data into train/test
set.seed(seed)
index <- createDataPartition(data[[y]], p = partition, list = FALSE)
train <- data[index, ]
test <- data[-index, ]
# set evaluation metric if not specified
if (missing(metric)) {
metric <- ifelse(is.factor(data[[y]]), "Accuracy", "RMSE")
}
# remove knn if dataset too large
if (nrow(data) >= 200){
quant_models <- quant_models[! quant_models %in% c("knn")]
categ_models <- categ_models[! categ_models %in% c("knn")]
}
# specify which models to train
if (missing(methods)) {
if (is.factor(data[[y]])) {
methods <- categ_models
} else {
methods <- quant_models
}
}
# loading required packages
if ("gbm" %in% methods) {
require(gbm)
}
# model list
models <- list()
# train models
for (method in methods){
if (method == "gbm") {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
verbose = FALSE,
...
)
models[[method]] <- model
} else {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
...
)
models[[method]] <- model
}
}
# result
result <- list(train = train,
test = test,
methods = methods,
models = models,
metric = metric
)
class(result) <- "quickmodel"
return(result)
}
# regression model
data(Boston)
reg <- quickmodel(medv ~ ., data = Boston)
quickmodel <- function(formula,
data, # all data
metric ,
methods ,
trControl = trainControl(),
tuneGrid = NULL,
tuneLength = 3,
partition = 0.8,
seed = 1234,
...
) {
# stop when the input dataset is too small
if (nrow(data) < 50){
stop("Dataset too small.")
}
# quantitative
quant_models <- c(#"lm", "knn", "rf",
"rpart"#,
#"gbm", "glmnet"
)
# categorical
categ_models <- c("glm", "knn", "rf", "rpart", "gbm")
# load caret
require("caret")
# extract y varname
y <- all.vars(formula)[1]
# change y var to factor if character
if (is.character(data[[y]])) {
data[[y]] <- factor(data[[y]])
}
# split data into train/test
set.seed(seed)
index <- createDataPartition(data[[y]], p = partition, list = FALSE)
train <- data[index, ]
test <- data[-index, ]
# set evaluation metric if not specified
if (missing(metric)) {
metric <- ifelse(is.factor(data[[y]]), "Accuracy", "RMSE")
}
# remove knn if dataset too large
if (nrow(data) >= 200){
quant_models <- quant_models[! quant_models %in% c("knn")]
categ_models <- categ_models[! categ_models %in% c("knn")]
}
# specify which models to train
if (missing(methods)) {
if (is.factor(data[[y]])) {
methods <- categ_models
} else {
methods <- quant_models
}
}
# loading required packages
if ("gbm" %in% methods) {
require(gbm)
}
# model list
models <- list()
# train models
for (method in methods){
if (method == "gbm") {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
verbose = FALSE,
...
)
models[[method]] <- model
} else {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
...
)
models[[method]] <- model
}
}
# result
result <- list(train = train,
test = test,
methods = methods,
models = models,
metric = metric
)
class(result) <- "quickmodel"
return(result)
}
# regression model
data(Boston)
reg <- quickmodel(medv ~ ., data = Boston)
View(Boston)
trctrl <- trainControl(method="cv",
number=10,
selectionFunction="oneSE")
trctrl <- trainControl(method="cv",
number=10,
selectionFunction="oneSE")
reg <- quickmodel(medv ~ ., data = Boston, trControl = trctrl)
reg <- quickmodel(medv ~ ., data = Boston)
View(Boston)
reg <- quickmodel(medv ~ ., data = Boston)
bestmodel <- function(quickmodel) {
models <- quickmodel$models
methods <- quickmodel$methods
metric_values <- data.frame(method = character(), metric = numeric())
metricname <- quickmodel$metric
for (method in methods){
model <- models[[method]]
metric <- mean(model$results[[metricname]])
metric_values <- rbind(data.frame(Model = method, metric = metric), metric_values)
}
max_metrics <- c("Accuracy", "ROC")
min_metrics <- c("RMSE")
if (metricname %in% max_metrics) {
best_model_index <- which.max(metric_values$metric)
} else if (metricname %in% min_metrics) {
best_model_index <- which.min(metric_values$metric)
}
names(metric_values)[2] <- metricname
bestmodelname <- metric_values$Model[best_model_index]
cat(paste0("The best model based on ", metricname, " is ", bestmodelname, "\n\n"))
print(metric_values)
best_model <- models[[metric_values$Model[best_model_index]]]
}
bestmodel(reg)
quickmodel <- function(formula,
data, # all data
metric ,
methods ,
trControl = trainControl(),
tuneGrid = NULL,
tuneLength = 3,
partition = 0.8,
seed = 1234,
...
) {
# stop when the input dataset is too small
if (nrow(data) < 50){
stop("Dataset too small.")
}
# quantitative
quant_models <- c("lm", "knn", "rf",
"rpart",
"gbm", "glmnet"
)
# categorical
categ_models <- c("glm", "knn", "rf", "rpart", "gbm")
# load caret
require("caret")
# extract y varname
y <- all.vars(formula)[1]
# change y var to factor if character
if (is.character(data[[y]])) {
data[[y]] <- factor(data[[y]])
}
# split data into train/test
set.seed(seed)
index <- createDataPartition(data[[y]], p = partition, list = FALSE)
train <- data[index, ]
test <- data[-index, ]
# set evaluation metric if not specified
if (missing(metric)) {
metric <- ifelse(is.factor(data[[y]]), "Accuracy", "RMSE")
}
# remove knn if dataset too large
if (nrow(data) >= 200){
quant_models <- quant_models[! quant_models %in% c("knn")]
categ_models <- categ_models[! categ_models %in% c("knn")]
}
# specify which models to train
if (missing(methods)) {
if (is.factor(data[[y]])) {
methods <- categ_models
} else {
methods <- quant_models
}
}
# loading required packages
if ("gbm" %in% methods) {
require(gbm)
}
# model list
models <- list()
# train models
for (method in methods){
if (method == "gbm") {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
verbose = FALSE,
...
)
models[[method]] <- model
} else {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
...
)
models[[method]] <- model
}
}
# result
result <- list(train = train,
test = test,
methods = methods,
models = models,
metric = metric
)
class(result) <- "quickmodel"
return(result)
}
# regression model
data(Boston)
reg <- quickmodel(medv ~ ., data = Boston)
bestmodel(reg)
View(PIMA)
reg <- quickmodel(BloodPressure ~ ., data = PIMA)
quickmodel <- function(formula,
data, # all data
metric ,
methods ,
trControl = trainControl(),
tuneGrid = NULL,
tuneLength = 3,
partition = 0.8,
seed = 1234,
...
) {
# stop when the input dataset is too small
if (nrow(data) < 50){
stop("Dataset too small.")
}
# quantitative
quant_models <- c(#"lm", "knn", "rf",
"rpart"#,
#"gbm", "glmnet"
)
# categorical
categ_models <- c("glm", "knn", "rf", "rpart", "gbm")
# load caret
require("caret")
# extract y varname
y <- all.vars(formula)[1]
# change y var to factor if character
if (is.character(data[[y]])) {
data[[y]] <- factor(data[[y]])
}
# split data into train/test
set.seed(seed)
index <- createDataPartition(data[[y]], p = partition, list = FALSE)
train <- data[index, ]
test <- data[-index, ]
# set evaluation metric if not specified
if (missing(metric)) {
metric <- ifelse(is.factor(data[[y]]), "Accuracy", "RMSE")
}
# remove knn if dataset too large
if (nrow(data) >= 200){
quant_models <- quant_models[! quant_models %in% c("knn")]
categ_models <- categ_models[! categ_models %in% c("knn")]
}
# specify which models to train
if (missing(methods)) {
if (is.factor(data[[y]])) {
methods <- categ_models
} else {
methods <- quant_models
}
}
# loading required packages
if ("gbm" %in% methods) {
require(gbm)
}
# model list
models <- list()
# train models
for (method in methods){
if (method == "gbm") {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
verbose = FALSE,
...
)
models[[method]] <- model
} else {
set.seed(seed)
model <- train(
formula,
data = train,
method = method,
metric = metric,
trControl = trControl,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
...
)
models[[method]] <- model
}
}
# result
result <- list(train = train,
test = test,
methods = methods,
models = models,
metric = metric
)
class(result) <- "quickmodel"
return(result)
}
reg <- quickmodel(medv ~ ., data = Boston)
bestmodel(reg)
library(rpart.plot)
rpart.plot(reg$finalModel)
reg <- bestmodel(reg)
rpart.plot(reg$finalModel)
build_site()
build_site()
